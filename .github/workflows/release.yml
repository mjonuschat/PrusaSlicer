name: Create Release

on:
  workflow_call:

jobs:
  create_macos_universal:
    name: Create universal MacOS Binary
    runs-on: macos-14
    if: github.ref == 'refs/heads/boss' || startsWith(github.ref, 'refs/heads/release/')
    env:
      date:
      ver:

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the version and date
        run: |
          ver_pure=$(grep 'set(SLIC3R_VERSION' version.inc | cut -d '"' -f2)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ver="PR-${{ github.event.number }}"
          else
            ver="$ver_pure+BOSS"
          fi
          echo "ver=$ver" >> $GITHUB_ENV
          echo "ver_pure=$ver_pure" >> $GITHUB_ENV
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash

      - name: Download MacOS Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: PrusaSlicer-*MacOS-* 
          merge-multiple: true

      - run: ls -R artifacts

      - name: Create universal binary
        run: |
          WORK_DIR=$(mktemp -d)
          DMG_ARM64=$(realpath $(ls ${GITHUB_WORKSPACE}/artifacts/PrusaSlicer*+MacOS-arm64*.dmg|head -n1))
          DMG_X86_64=$(realpath $(ls ${GITHUB_WORKSPACE}/artifacts/PrusaSlicer*+MacOS-x86_64*.dmg|head -n1))
          DMG_UNIVERSAL=$(echo "${DMG_ARM64}" | sed -e 's/arm64/universal/')
          pushd ${WORK_DIR} &>/dev/null
          hdiutil attach -mountpoint ./arm64 ${DMG_ARM64}
          hdiutil attach -mountpoint ./x86_64 ${DMG_X86_64}

          rsync -aq arm64/ universal/
          lipo \
            arm64/PrusaSlicer.app/Contents/MacOS/PrusaSlicer \
            x86_64/PrusaSlicer.app/Contents/MacOS/PrusaSlicer \
            -create -output universal/PrusaSlicer.app/Contents/MacOS/PrusaSlicer

          hdiutil detach -quiet ./arm64
          hdiutil detach -quiet ./x86_64

          hdiutil create -volname "PrusaSlicer" -srcfolder ./universal -ov -format UDZO ${DMG_UNIVERSAL}
          popd &>/dev/null
          echo "DMG_UNIVERSAL=$(ls ${GITHUB_WORKSPACE}/artifacts/PrusaSlicer*+MacOS-universal*.dmg|head -n1)" >> $GITHUB_ENV

      - name: Sign universal binary
        working-directory: ${{ github.workspace }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERTIFICATE_ID: ${{ secrets.MACOS_CERTIFICATE_ID }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $P12_PASSWORD $KEYCHAIN_PATH
          codesign --deep --force --verbose --options runtime --timestamp --entitlements ${{ github.workspace }}/.github/scripts/disable_validation.entitlements --sign "$CERTIFICATE_ID" "${{ env.DMG_UNIVERSAL }}"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "${{ secrets.APPLE_DEV_ACCOUNT }}" --team-id "${{ secrets.TEAM_ID }}" --password "${{ secrets.APP_PWD }}"
          xcrun notarytool submit "${{ env.DMG_UNIVERSAL }}" --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple "${{ env.DMG_UNIVERSAL }}"

      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: PrusaSlicer-${{ env.ver }}+MacOS-universal-${{ env.date }}
          path: ${{ env.DMG_UNIVERSAL }}

  create_nightly:
    name: Create nightly release
    runs-on: ubuntu-latest
    needs: create_macos_universal
    permissions:
      contents: write
    if: github.ref == 'refs/heads/boss'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: PrusaSlicer-*BOSS* 
          merge-multiple: true

      - run: ls -la PrusaSlicer-*

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "PrusaSlicer-*BOSS*"
          allowUpdates: true
          artifactErrorsFailBuild: true
          bodyFile: ${{ github.workspace }}/.github/RELEASE_TEMPLATE.md
          commit: ${{ github.sha }}
          draft: true
          makeLatest: false
          name: PrusaSlicer+BOSS Development Build
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          removeArtifacts: true
          replacesArtifacts: true
          tag: latest

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: create_macos_universal
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the version
        run: |
          ver_pure=$(grep 'set(SLIC3R_VERSION' version.inc | cut -d '"' -f2)
          echo "ver_pure=$ver_pure" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: PrusaSlicer-*BOSS* 
          merge-multiple: true


      - uses: ncipollo/release-action@v1
        with:
          artifacts: "PrusaSlicer-*BOSS+win64*,PrusaSlicer-*BOSS+MacOS-universal*,PrusaSlicer-*+BOSS+Linux*AppImage*"
          allowUpdates: false
          artifactErrorsFailBuild: true
          bodyFile: ${{ github.workspace }}/.github/RELEASE_TEMPLATE.md
          commit: ${{ github.sha }}
          draft: true
          makeLatest: true
          name: PrusaSlicer ${{ env.ver_pure }} (BOSS)
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          removeArtifacts: true
          replacesArtifacts: true
          skipIfReleaseExists: true
          updateOnlyUnreleased: true
          tag: version_${{ env.ver_pure }}+boss
